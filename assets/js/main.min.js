const cardDeck=["puppy1.jpg","puppy2.jpg","puppy3.jpg","puppy4.jpg","puppy5.jpg","puppy6.jpg","puppy7.jpg","puppy8.jpg"],gameId="board-game",delayBeforeRemovingCards=100,maxTopScores=10,gameTime=120;class BoardGame{constructor(e){this.fullDeck=[],this.totalTurns=0,this.totalTime=e,this.timeLeft=e,this.turns=document.getElementById("turns"),this.timer=document.getElementById("time-left"),this.configuration=null,this.playerPanel=document.getElementById("playerPanel"),this.boardPanel=document.getElementById("main-gameboard"),this.checkCard=null,this.addListeners()}start(){this.loadConfiguration(),this.showPlayerPanel()}addListeners(){document.getElementById("playerForm").addEventListener("submit",this.onStartGameHandler.bind(this))}loadConfiguration(){this.configuration=JSON.parse(localStorage.getItem(gameId)),this.configuration||(this.configuration={playerName:"",scores:[]})}startGame(){this.checkCard=null,this.totalTurns=0,this.timeLeft=this.totalTime,this.matchedCards=[],this.busy=!0,setTimeout(()=>{this.shuffleDeck(this.fullDeck),this.countDown=this.startCountDown(),this.busy=!1},500),this.hideCards(),this.timer.innerText=this.timeLeft,this.turns.innerText=this.totalTurns,this.showBoardPanel(),this.appendCards(),this.subscribeButton()}showPlayerPanel(){document.getElementById("playerName").value=this.configuration.playerName,this.renderScores(),this.boardPanel.classList.toggle("d-none",!0),this.playerPanel.classList.toggle("d-none",!1)}showBoardPanel(){this.playerPanel.classList.toggle("d-none",!0),this.boardPanel.classList.toggle("d-none",!1)}renderScores(){let e=document.getElementById("scores");e.firstElementChild&&e.firstElementChild.remove();let t=document.createElement("table");t.createTHead().insertRow(0).innerHTML='<th class="position">Position</th>\n                            <th class="player-name">Player Name</th>\n                            <th class="flips">Total Turns</th>\n                            <th class="total-time">Total Time</th>';let s=document.createElement("tbody");this.configuration.scores.forEach((e,t)=>{let a=document.createElement("tr");a.innerHTML=`<td class="position">${t+1}</td> \n                            <td class="player-name">${e.playerName}</td>\n                            <td class="flips">${e.flips}</td>\n                            <td class="total-time">${e.totalTime}</td>`,e.currentPlayer&&a.classList.add("last-game"),s.appendChild(a)}),t.appendChild(s),e.appendChild(t)}onStartGameHandler(e){e.stopImmediatePropagation(),e.preventDefault(),this.configuration.playerName=e.target[0].value,this.startGame()}popSound(){new Audio("assets/audio/pop.mp3").play()}renderCard(e){return`<div class="card">\n                    <div class="card-back all-cards">\n                        <img class="card-img" src="assets/images/card-back.jpg"  alt="Hidden card">\n                    </div> \n                    <div class="card-picture all-cards">\n                        <img class="card-value card-img" src="assets/images/${e}" alt="Picture card">\n                    </div>\n                </div>`}appendCards(){const e=cardDeck.concat(cardDeck),t=document.getElementById("main-gameboard");e.forEach(e=>t.insertAdjacentHTML("beforeend",this.renderCard(e)));let s=Array.from(document.getElementsByClassName("card"));s.forEach(e=>{e.addEventListener("click",()=>{this.turnCard(e),this.popSound()})}),this.fullDeck=s}removeCards(){Array.from(document.getElementsByClassName("card")).forEach(e=>e.remove())}subscribeButton(){document.getElementById("subscribe-submit").addEventListener("click",function(){document.getElementById("email-subscribe").remove(),document.getElementById("email-text").innerText="Thank you. You are now subscribed!"})}startCountDown(){return setInterval(()=>{this.timeLeft--,this.timer.innerText=this.timeLeft,0===this.timeLeft&&this.gameOver()},1e3)}gameFinished(){clearInterval(this.countDown),this.removeCards(),this.showPlayerPanel()}currentScore(){document.getElementById("current-score").innerText=this.totalTurns}gameOver(){this.renderScores(),this.boardPanel.classList.toggle("d-none",!0),this.playerPanel.classList.toggle("d-none",!1),this.gameFinished()}gameWin(){this.currentScore(),this.updateScores(),this.gameFinished()}updateScores(){let e=this.configuration.scores.findIndex(e=>!0===e.currentPlayer);-1!==e&&(this.configuration.scores[e].currentPlayer=!1),this.configuration.scores.push({playerName:this.configuration.playerName,flips:this.totalTurns,totalTime:this.totalTime-this.timeLeft,currentPlayer:!0}),this.configuration.scores.sort((e,t)=>e.flips<t.flips?-1:e.flips>t.flips?1:e.totalTime<t.totalTime?-1:e.totalTime>t.totalTime?1:0),this.configuration.scores.length>maxTopScores&&this.configuration.scores.pop(),localStorage.setItem(gameId,JSON.stringify(this.configuration))}hideCards(){this.fullDeck.forEach(e=>{e.classList.remove("visible")})}turnCard(e){this.isCardFacedDown(e)&&(this.totalTurns++,this.turns.innerText=this.totalTurns,e.classList.add("visible"),this.checkCard?this.checkForMatch(e):this.checkCard=e)}checkForMatch(e){this.checkCardType(e)===this.checkCardType(this.checkCard)?this.cardMatcher(e,this.checkCard):(this.notAMatch(e,this.checkCard),this.checkCard=null)}cardMatcher(e,t){this.matchedCards.push(e),this.matchedCards.push(t),setTimeout(()=>{e.classList.add("invisible"),t.classList.add("invisible")},delayBeforeRemovingCards),this.checkCard=null,this.matchedCards.length===this.fullDeck.length&&this.gameWin()}notAMatch(e,t){this.busy=!0,setTimeout(()=>{e.classList.remove("visible"),t.classList.remove("visible"),this.busy=!1},500)}checkCardType(e){return e.getElementsByClassName("card-value")[0].src}shuffleDeck(){for(let e=this.fullDeck.length-1;e>0;e--){let t=Math.floor(Math.random()*(e+1));this.fullDeck[t].style.order=e,this.fullDeck[1].style.order=t}}isCardFacedDown(e){return!this.busy&&!this.matchedCards.includes(e)&&e!==this.checkCard}}const game=new BoardGame(120);game.start();
